package memory

import (
	"context"
	"fmt"
	"log"
	"reflect"
	"runtime"
	"time"
)

// Monitored is each monitored tag generated by [Monitor.Register].
type Monitored struct {
	// Alloc is the atual memory allocated in Heap ([runtime.MemStats.Alloc]).
	Alloc uint64
	// Total is the total memory allocated in Heap throughout the execution ([runtime.MemStats.TotalAlloc]).
	Total uint64
	// Cancel is called by [Monitor.Shut] to stop monitoring  of a tag. Can be called directlly to.
	Cancel context.CancelFunc

	mem runtime.MemStats
	ctx context.Context
}

// Monitor store the monitored memory of "tags".
type Monitor struct {
	Peaks map[string]*Monitored
}

func (m *Monitor) initialize() {
	if reflect.ValueOf(m.Peaks).IsZero() {
		m.Peaks = make(map[string]*Monitored)
	}
}

func (m *Monitor) monitor(tag string, delay time.Duration) {
	ticker := time.NewTicker(delay)
	go func() {
		defer ticker.Stop()
		for {
			select {
			case <-m.Peaks[tag].ctx.Done():
				return
			case <-ticker.C:
				alloc, _, _, _, _ := mem(&m.Peaks[tag].mem)
				if alloc > m.Peaks[tag].Alloc {
					m.Peaks[tag].Alloc = alloc
				}
			}
		}
	}()
}

// Register register a new memory monitor. Default value for delay is [time.Second].
func (m *Monitor) Register(tag string, delay ...time.Duration) {
	m.initialize()

	ctx, cancel := context.WithCancel(context.Background())
	m.Peaks[tag] = &Monitored{
		ctx:    ctx,
		Cancel: cancel,
	}

	_, total, _, _, _ := mem(&m.Peaks[tag].mem)
	m.Peaks[tag].Total = total

	duration := time.Second
	if len(delay) > 0 {
		duration = delay[0]
	}
	m.monitor(tag, duration)
}

// Shut shuts the monitoring to a memory monitor.
func (m *Monitor) Shut(tag string) {
	m.initialize()

	if _, ok := m.Peaks[tag]; !ok {
		return
	}

	m.Peaks[tag].Cancel()

	_, total, _, _, _ := mem(&m.Peaks[tag].mem)
	m.Peaks[tag].Total = total - m.Peaks[tag].Total
}

// Print prints the monitored memory stats.
func (m Monitor) Print() {
	var args []any
	format := "memory monitor:\n"
	for tag, peak := range m.Peaks {
		format += "- %s: alloc %dMiB - total %dMiB\n"
		args = append(args, tag, peak.Alloc/1024/1024, peak.Total/1024/1024)
	}
	fmt.Printf(format, args...)
}

// Log logs the monitored memory stats.
func (m Monitor) Log() {
	var args []any
	format := "memory monitor:\n"
	for tag, peak := range m.Peaks {
		format += "%s - %s: alloc %dMiB - total %dMiB\n"
		args = append(args,
			time.Now().Format("2006/01/02 15:04:05"), tag,
			peak.Alloc/1024/1024, peak.Total/1024/1024,
		)
	}
	log.Printf(format, args...)
}

func (m Monitor) String() string {
	format := "memory monitor:\n"
	for tag, peak := range m.Peaks {
		format += fmt.Sprintf(
			"- %s: alloc %dMiB - total %dMiB\n",
			tag, peak.Alloc/1024/1024, peak.Total/1024/1024,
		)
	}
	return format
}
